<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>C++学习笔记</title>
    <link href="/2021/08/31/C-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2021/08/31/C-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="Part1：菜鸟教程"><a href="#Part1：菜鸟教程" class="headerlink" title="Part1：菜鸟教程"></a>Part1：菜鸟教程</h2><h3 id="1-C-基本数据类型"><a href="#1-C-基本数据类型" class="headerlink" title="1. C++基本数据类型"></a>1. C++基本数据类型</h3><p>C++ 为程序员提供了种类丰富的内置数据类型和用户自定义的数据类型。下表列出了七种基本的 C++ 数据类型：</p><table><thead><tr><th align="center">类型</th><th align="center">关键字</th></tr></thead><tbody><tr><td align="center">布尔型</td><td align="center">bool</td></tr><tr><td align="center">字符型</td><td align="center">char</td></tr><tr><td align="center">整型</td><td align="center">int</td></tr><tr><td align="center">浮点型</td><td align="center">float</td></tr><tr><td align="center">双浮点型</td><td align="center">double</td></tr><tr><td align="center">无类型</td><td align="center">void</td></tr><tr><td align="center">宽字符型</td><td align="center">wchar_t</td></tr></tbody></table><blockquote><p>我们不应把 true 的值看成 1，把 false 的值看成 0。</p></blockquote><h3 id="2-C-修饰符类型"><a href="#2-C-修饰符类型" class="headerlink" title="2. C++修饰符类型"></a>2. C++修饰符类型</h3><p>C++ 允许在 <strong>char、int 和 double</strong> 数据类型前放置修饰符。修饰符用于改变基本类型的含义，所以它更能满足各种情境的需求。</p><p>下面列出了数据类型修饰符：</p><ul><li>signed</li><li>unsigned</li><li>long</li><li>short</li></ul><p>修饰符 <strong>signed、unsigned、long 和 short</strong> 可应用于整型，<strong>signed</strong> 和 <strong>unsigned</strong> 可应用于字符型，<strong>long</strong> 可应用于双精度型。</p><p>修饰符 <strong>signed</strong> 和 <strong>unsigned</strong> 也可以作为 <strong>long</strong> 或 <strong>short</strong> 修饰符的前缀。例如：<strong>unsigned long int</strong>。</p><p>C++ 允许使用速记符号来声明<strong>无符号短整数</strong>或<strong>无符号长整数</strong>。您可以不写 int，只写单词 <strong>unsigned、short</strong> 或 <strong>unsigned、long</strong>，<code>int</code> 是隐含的。</p><h3 id="3-C-储存类"><a href="#3-C-储存类" class="headerlink" title="3.C++储存类"></a>3.C++储存类</h3><p><strong>static</strong> 存储类指示编译器在程序的生命周期内保持局部变量的存在，而不需要在每次它进入和离开作用域时进行创建和销毁。</p><p>因此，使用 static 修饰局部变量可以在函数调用之间保持局部变量的值。</p><h3 id="4-数组"><a href="#4-数组" class="headerlink" title="4. 数组"></a>4. 数组</h3><p>所有的数组都是由连续的内存位置组成。最低的地址对应第一个元素，最高的地址对应最后一个元素。</p><h3 id="5-引用"><a href="#5-引用" class="headerlink" title="5.引用"></a>5.引用</h3><p>引用变量是某个已存在变量的另一个名字。一旦把引用初始化为某个变量，就可以使用该引用名称或变量名称来指向变量。</p><h4 id="C-引用-vs-指针"><a href="#C-引用-vs-指针" class="headerlink" title="C++ 引用 vs 指针"></a>C++ 引用 vs 指针</h4><p>引用很容易与指针混淆，它们之间有三个主要的不同：</p><ul><li>不存在空引用。引用必须连接到一块合法的内存。</li><li>一旦引用被初始化为一个对象，就不能被指向到另一个对象。指针可以在任何时候指向到另一个对象。</li><li>引用必须在创建时被初始化。指针可以在任何时间被初始化。</li></ul><p>我们可以为 i 声明引用变量，如下所示：</p><figure class="highlight 1c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs 1c">int<span class="hljs-meta">&amp;  r = i;</span><br></code></pre></div></td></tr></table></figure><p>之后，r就可以当作正常的变量使用</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">swap</span><span class="hljs-params">(<span class="hljs-keyword">int</span>&amp; x, <span class="hljs-keyword">int</span>&amp; y)</span></span><br><span class="hljs-function"></span>&#123;<br>   <span class="hljs-keyword">int</span> temp;<br>   temp = x; <span class="hljs-comment">/* 保存地址 x 的值 */</span><br>   x = y;    <span class="hljs-comment">/* 把 y 赋值给 x */</span><br>   y = temp; <span class="hljs-comment">/* 把 x 赋值给 y  */</span><br>   <span class="hljs-keyword">return</span>;<br>&#125;<span class="hljs-comment">//通过引用的方式传入参数，既可以免去指针操作的繁琐，又可以修改原参数</span><br></code></pre></div></td></tr></table></figure><h1 id="Part2：OI-WIKI"><a href="#Part2：OI-WIKI" class="headerlink" title="Part2：OI WIKI"></a>Part2：OI WIKI</h1><h2 id="1-内存分配"><a href="#1-内存分配" class="headerlink" title="1. 内存分配"></a>1. 内存分配</h2><p>​        C++ 中新增了 <code>new</code> 和 <code>delete</code> 关键字用来在“自由存储区”上分配空间，这个自由存储区可以是堆也可以是静态存储区，他们是为了配合“类”而出现的。其中 <code>delete[]</code> 还能够直接释放动态数组的内存，非常方便。<code>new</code> 和 <code>delete</code> 关键字会调用类型的构造函数和析构函数，相比 C 中的 <code>malloc()</code>、<code>realloc()</code>、<code>free()</code> 函数，他们对类型有更完善的支持，<strong>但是效率不如 C 中的这些函数</strong>。</p><p>​        简而言之，如果你需要动态分配内存的对象是<strong>基础类型或他们的数组</strong>，那么你可以**使用 <code>malloc()</code> **进行更高效的内存分配；但如果你新建的对象是非基础的类型，那么建议使用 <code>new</code> 以获得安全性检查。值得注意的是尽管 <code>new</code> 和 <code>malloc()</code> 都是返回指针，但是 <code>new</code> 出来的指针 <strong>只能</strong> 用 <code>delete</code> 回收，而 <code>malloc()</code> 出来的指针也只能用 <code>free()</code> 回收，否则会有内存泄漏的风险</p><h2 id="2-struct"><a href="#2-struct" class="headerlink" title="2. struct"></a>2. struct</h2><p>​    尽管在 C 和 C++ 中都有 struct 的概念，但是他们对应的东西是不能混用的！C 中的 struct 用来描述一种固定的内存组织结构，而 <strong>C++ 中的 struct 就是一种类</strong>，<strong>它与类唯一的区别就是它的成员和继承行为默认是 public 的</strong>，而一般类的默认成员是 private 的。这一点在写 C/C++ 混合代码时尤其致命。</p><p>另外，声明 struct 时 C++ 也不需要像 C 那么繁琐，</p><p>C 版本：</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node_t</span>&#123;</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node_t</span> *<span class="hljs-title">next</span>;</span><br>    <span class="hljs-keyword">int</span> key;<br>&#125; Node;<br></code></pre></div></td></tr></table></figure><p>C++ 版本</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span> &#123;</span><br>  Node *next;<br>  <span class="hljs-keyword">int</span> key;<br>&#125;;<span class="hljs-comment">//和类的声明非常类似</span><br></code></pre></div></td></tr></table></figure><h2 id="3-类"><a href="#3-类" class="headerlink" title="3. 类"></a>3. 类</h2><p>类（class）是结构体的拓展，不仅能够拥有成员元素，还拥有成员函数。</p><p>C++ 中 <code>struct</code> 关键字定义的也是类，上文中的 <strong>结构体</strong> 的定义来自 C。因为某些历史原因，C++ 保留并拓展了 <code>struct</code>。</p><h3 id="定义类"><a href="#定义类" class="headerlink" title="定义类"></a>定义类</h3><p>类使用关键字 <code>class</code> 或者 <code>struct</code> 定义，下文以 <code>class</code> 举例。</p><h3 id="访问说明符"><a href="#访问说明符" class="headerlink" title="访问说明符"></a>访问说明符</h3><ul><li><code>public</code>：<strong>类内</strong> 还是 <strong>类外</strong> 都可以访问。</li><li><code>protected</code>：可以被<strong>类内、派生类</strong>或者友元的成员访问，但类外<strong>不能访问</strong>。</li><li><code>private</code>：只能被 <strong>类内</strong> 成员或者友元的成员访问，<strong>不能</strong> 被从类外或者派生类中访问。</li></ul><p>对于 <code>struct</code>，它的所有成员都是默认 <code>public</code>。对于 <code>class</code>，它的所有成员都是默认 <code>private</code>。</p><blockquote><p>友元：使用 <code>friend</code> 关键字修饰某个函数或者类。</p><p>简单来说就是只要带有这个类的 <code>friend</code> 标记，就<strong>可以访问私有</strong>或<strong>受保护</strong>的成员元素。</p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux下使用命令行打开网页</title>
    <link href="/2021/08/31/%E4%BD%BF%E7%94%A8%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%89%93%E5%BC%80%E7%BD%91%E9%A1%B5/"/>
    <url>/2021/08/31/%E4%BD%BF%E7%94%A8%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%89%93%E5%BC%80%E7%BD%91%E9%A1%B5/</url>
    
    <content type="html"><![CDATA[<blockquote><p>部分应用没有Linux版本，而使用wine版本又存在bug，对于有网页版的应用，我们可以使用如下的方式。</p><p>以下以test为例</p></blockquote><ol><li><p>创建文件夹test</p></li><li><p>cd进该文件夹，执行<code>yarn init</code></p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ code index.js<br><span class="hljs-comment">#输入以下内容</span><br>const &#123; app, BrowserWindow, Menu &#125; = require(<span class="hljs-string">&#x27;electron&#x27;</span>)<br>Menu.setApplicationMenu(null);<br>app.on(<span class="hljs-string">&#x27;ready&#x27;</span>, ()=&gt;&#123;<br><span class="hljs-built_in">let</span> win = new BrowserWindow()<br>win.loadURL(<span class="hljs-string">&#x27;目标网址&#x27;</span>)<br>&#125;)<br>$ electron .<br><span class="hljs-comment">#或者 </span><br>$ electron ~/Code/linux_app_repo/<span class="hljs-built_in">test</span> <span class="hljs-comment">#绝对路径（这里是我的绝对路径，以实际情况为准）</span><br></code></pre></div></td></tr></table></figure></li><li><p>将上述的electron指令写入到xxx.sh文件中，并将该sh文件<code>mv</code>到<code>/usr/local/bin</code>下</p></li><li><p>编辑<code>～/.zshrc</code>，使用<code>alias</code>指令将xxx.sh转换为想要的指令名，然后<code>source</code>一下即可生效</p></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>OI Wiki学习笔记</title>
    <link href="/2021/08/31/OI-Wiki%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2021/08/31/OI-Wiki%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="Part1：语言基础"><a href="#Part1：语言基础" class="headerlink" title="Part1：语言基础"></a>Part1：语言基础</h2><h4 id="1-数组"><a href="#1-数组" class="headerlink" title="1. 数组"></a>1. 数组</h4><ol><li>应该尽量将较大的数组定义为全局变量。因为局部变量会被创建在栈区中，过大（大于栈的大小）的数组会爆栈，进而导致 RE。</li><li>可以通过下标运算符 <code>[]</code> 来访问数组内元素，数组的索引（即方括号中的值）从 0 开始。以一个包含 10 个元素的数组为例，它的索引为 0 到 9，而非 1 到 10。但在 OI 中，为了使用方便，我们通常会将数组开大一点，不使用数组的第一个元素，从下标 1 开始访问数组元素。</li></ol><h4 id="2-文件读写"><a href="#2-文件读写" class="headerlink" title="2. 文件读写"></a>2. 文件读写</h4><ol><li><p><strong>freopen</strong></p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-function">FILE* <span class="hljs-title">freopen</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span>* filename, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span>* mode, FILE* stream)</span></span>;<span class="hljs-comment">//stream即为stdin和stdout</span><br></code></pre></div></td></tr></table></figure><p>将指定输入输出流以指定方式重定向到文件，包含于头文件 <code>stdio.h (cstdio)</code> 中。</p><p>该函数可以在不改变代码原貌的情况下改变输入输出环境</p><p>配合<code>scanf</code>、<code>printf</code>即可直接实现文件读写</p></li><li><p><strong>fopen</strong></p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-function">FILE* <span class="hljs-title">fopen</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span>* path, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span>* mode)</span></span><br></code></pre></div></td></tr></table></figure><p>配合<code>fscanf</code>、<code>fprintf</code></p><p>还需要定义File指针</p></li></ol><h2 id="Part2：算法基础"><a href="#Part2：算法基础" class="headerlink" title="Part2：算法基础"></a>Part2：算法基础</h2><h4 id="1-递归要点"><a href="#1-递归要点" class="headerlink" title="1. 递归要点"></a>1. 递归要点</h4><p><strong>明白一个函数的作用并相信它能完成这个任务，千万不要跳进这个函数里面企图探究更多细节，</strong> 否则就会陷入无穷的细节无法自拔，人脑能压几个栈啊。以遍历二叉树为例。</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">traverse</span><span class="hljs-params">(TreeNode* root)</span> </span>&#123;<br>  <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">nullptr</span>) <span class="hljs-keyword">return</span>;<br>  <span class="hljs-built_in">traverse</span>(root-&gt;left);<br>  <span class="hljs-built_in">traverse</span>(root-&gt;right);<br>&#125;<br></code></pre></div></td></tr></table></figure><p>​        这几行代码就足以遍历任何一棵二叉树了。对于递归函数 <code>traverse(root)</code>，只要相信给它一个根节点 <code>root</code>，它就能遍历这棵树。所以只需要把这个节点的左右节点再传给这个函数就行了。</p>]]></content>
    
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用Hexo+github搭建个人博客并发布文章</title>
    <link href="/2021/08/30/%E4%BD%BF%E7%94%A8Hexo-github%E9%83%A8%E7%BD%B2%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <url>/2021/08/30/%E4%BD%BF%E7%94%A8Hexo-github%E9%83%A8%E7%BD%B2%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<h2 id="1-环境配置"><a href="#1-环境配置" class="headerlink" title="1. 环境配置"></a>1. 环境配置</h2><p>在安装nodejs和npm时踩坑，一开始使用yay安装，但npm无法使用，一直报错缺少module.</p><p>解决：使用nvm安装</p><h2 id="2-hexo命令"><a href="#2-hexo命令" class="headerlink" title="2. hexo命令"></a>2. hexo命令</h2><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs hexo">hexo init #初始化博客<br>命令简写<br>hexo n &quot;我的博客&quot; == hexo new &quot;我的博客&quot; #新建文章<br>hexo g == hexo generate #生成<br>hexo s == hexo server #启动服务预览<br>hexo d == hexo deploy #部署<br><br>hexo server #Hexo会监视文件变动并自动更新，无须重启服务器<br>hexo server -s #静态模式<br>hexo server -p 5000 #更改端口<br>hexo server -i 192.168.1.1 #自定义 IP<br>hexo clean #清除缓存，若是网页正常情况下可以忽略这条命令<br></code></pre></div></td></tr></table></figure><h3 id="发布新文章"><a href="#发布新文章" class="headerlink" title="发布新文章"></a>发布新文章</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ hexo clean//本来不需要这一步，但是加上总没错<br>$ hexo g<br>$ hexo d<br></code></pre></div></td></tr></table></figure><blockquote><p>如果看不到网页更新，尝试使用<code>Shift</code>+<code>F5</code>清空浏览器缓存后重试</p></blockquote><h2 id="3-主题配置"><a href="#3-主题配置" class="headerlink" title="3. 主题配置"></a>3. 主题配置</h2><p>本网站使用的主题为fluid,配置文档<a href="https://hexo.fluid-dev.com/docs/guide">看这里</a></p><p>其他功能定制<a href="https://www.erenship.com/posts/40222.html">看这里</a></p><h2 id="4-文章编写"><a href="#4-文章编写" class="headerlink" title="4. 文章编写"></a>4. 文章编写</h2><h3 id="4-1-Front-matter"><a href="#4-1-Front-matter" class="headerlink" title="4.1  Front-matter"></a>4.1  <a href="https://hexo.io/zh-cn/docs/front-matter">Front-matter</a></h3><ul><li><p>添加标签</p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">tags:</span> <span class="hljs-string">a</span> <span class="hljs-comment">#添加a标签</span><br><span class="hljs-string">tags:[a,</span> <span class="hljs-string">b]</span> <span class="hljs-comment">#添加a和b两个标签</span><br></code></pre></div></td></tr></table></figure></li><li><p>为首页的文章配封面图</p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">index_img:</span> <span class="hljs-string">/img/example.jpg</span><br></code></pre></div></td></tr></table></figure><p>如果想统一给文章设置一个默认图片（文章不设置 <code>index_img</code> 则默认使用这张图片），可在<strong>主题配置</strong>中设置：</p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">post:</span><br>  <span class="hljs-attr">default_index_img:</span> <span class="hljs-string">/img/example.jpg</span><br></code></pre></div></td></tr></table></figure></li><li><p>文章页顶部大图</p><p>默认显示<strong>主题配置</strong>中的 <code>post.banner_img</code></p><p>如需要设置单个文章的 Banner，在 <a href="https://hexo.io/zh-cn/docs/front-matter">Front-matter (opens new window)</a>中指定 <code>banner_img</code> 属性。</p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-string">banner_img：</span> <span class="hljs-string">/img/xxx.jpg</span><br></code></pre></div></td></tr></table></figure></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux笔记</title>
    <link href="/2021/08/30/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2021/08/30/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="Part-1：-bash"><a href="#Part-1：-bash" class="headerlink" title="Part 1： bash"></a>Part 1： bash</h2><h3 id="1-压缩文件"><a href="#1-压缩文件" class="headerlink" title="1. 压缩文件"></a>1. 压缩文件</h3><p>*.zip          zip 程序压缩的文件;<br>*.gz           gzip 程序压缩的文件;#windows中的WinRaR/7Zip可解压<br>*.bz2          bzip2 程序压缩的文件;#比gzip更好<br>*.xz           xz 程序压缩的文件;#压缩比更高<br>#因为上述程序通常只能压缩一个文件，所以在压缩多个文件时非常不方便<br>#所以产生了tar这个打包程序，将多个文件打包成一个文件！<br>*.tar          tar 程序打包的数据,#并没有压缩过;<br>*.tar.gz      tar 程序打包的文件,其中并且经过 gzip 的压缩<br>*.tar.bz2      tar 程序打包的文件,其中并且经过 bzip2 的压缩<br>*.tar.xz      tar 程序打包的文件,其中并且经过 xz 的压缩</p><h4 id="1-单个文件-gz-bz2-xz"><a href="#1-单个文件-gz-bz2-xz" class="headerlink" title="(1) 单个文件: .gz   .bz2   xz"></a>(1) 单个文件: <code>.gz</code>   <code>.bz2</code>   <code>xz</code></h4><p>用法几乎相同</p><figure class="highlight diff"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs diff"><span class="hljs-deletion">-d :解压缩</span><br><span class="hljs-deletion">-c :将压缩的过程产生的数据输出到屏幕上</span><br><span class="hljs-deletion">-k :保留原本的文件</span><br><span class="hljs-deletion">-v :可以显示出原文件/压缩文件案的压缩比等信息;</span><br><span class="hljs-deletion">-# :#为数字的意思,代表压缩等级,默认是6</span><br><span class="hljs-deletion">-l :列出压缩文件的相关信息</span><br></code></pre></div></td></tr></table></figure><h4 id="2-打包-tar"><a href="#2-打包-tar" class="headerlink" title="(2) 打包:  tar"></a>(2) 打包:  <code>tar</code></h4><figure class="highlight diff"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs diff"><span class="hljs-deletion">-x :解打包或解压缩的功能,可以搭配 -C (大写) 在特定目录解开</span><br><span class="hljs-deletion">-C 目录:这个选项用在解压缩,若要在特定目录解压缩,可以使用这个选项。</span><br><span class="hljs-deletion">-f filename:-f 后面要立刻接要被处理的档名!建议 -f 单独写一个选项啰!(比较不会忘记)</span><br><br><span class="hljs-deletion">-c :建立打包文件,可搭配 -v 来察看过程中被打包的档名(filename)</span><br><span class="hljs-deletion">-t :察看打包文件的内容含有哪些档名,重点在察看『档名』就是了;</span><br><span class="hljs-deletion">-v :在压缩/解压缩的过程中,显示正在处理的文件名</span><br><br><span class="hljs-deletion">-z :透过 gzip的支持进行压缩/解压缩:此时档名最好为 *.tar.gz</span><br><span class="hljs-deletion">-j :透过 bzip2 的支持进行压缩/解压缩:此时档名最好为 *.tar.bz2</span><br><span class="hljs-deletion">-J :透过 xz的支持进行压缩/解压缩:此时档名最好为 *.tar.xz</span><br></code></pre></div></td></tr></table></figure><h4 id="3-对于tar-xz-等文件-可采用两种方法解压"><a href="#3-对于tar-xz-等文件-可采用两种方法解压" class="headerlink" title="(3) 对于tar.xz 等文件 可采用两种方法解压"></a>(3) 对于<code>tar.xz</code> 等文件 可采用两种方法解压</h4><ul><li>先将外层用xz解压方式解压,，然后里层用tar解压方式解压：</li></ul><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ xz -d  ***.tar.xz<br>$ tar -xv -f  ***.tar<br></code></pre></div></td></tr></table></figure><ul><li>直接解压：</li></ul><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">解压: $ tar -Jxv -f  ***.tar.xz<br>压缩: $ tar -Jcv -f  ***.tar.xz    <span class="hljs-comment">#compress</span><br><span class="hljs-comment">#对于tar.gz : 将J改为z</span><br><span class="hljs-comment">#对于tar.bz2: 将J改为j</span><br></code></pre></div></td></tr></table></figure><h3 id="2-安装"><a href="#2-安装" class="headerlink" title="2. 安装"></a>2. 安装</h3><h4 id="2-1-Ubuntu及类似环境下"><a href="#2-1-Ubuntu及类似环境下" class="headerlink" title="2.1 Ubuntu及类似环境下"></a>2.1 Ubuntu及类似环境下</h4><h5 id="1-deb"><a href="#1-deb" class="headerlink" title="(1) deb"></a>(1) deb</h5><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ sudo dpkg -i xxxx.deb<br><span class="hljs-comment">#对于官⽹已经提供了 Ubuntu 版本 .deb 安装⽂件的，可在官⽹下载 .deb 安装⽂件后，执⾏下⾯的命令安装</span><br>$ sudo apt install ./&lt;file&gt;.deb<br></code></pre></div></td></tr></table></figure><h5 id="2-rmp"><a href="#2-rmp" class="headerlink" title="(2) rmp"></a>(2) rmp</h5><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 将.rpm 包转换为.deb 包（当前⽬录下会⽣成⼀个 deb 安装包)</span><br>sudo alien xxxx.rpm<br><span class="hljs-comment"># 安装</span><br>sudo dpkg -i xxxx.deb<br></code></pre></div></td></tr></table></figure><h4 id="2-2-Manjaro"><a href="#2-2-Manjaro" class="headerlink" title="2.2 Manjaro"></a>2.2 Manjaro</h4><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ debtap xxx.deb <br><span class="hljs-comment"># manjaro需要先使用debtap工具将deb包转换为arch软件包</span><br><span class="hljs-comment"># 可使用-q跳过问题</span><br>$ sudo pacman -U xxx.tar.xx <br><span class="hljs-comment">#然后使用pacman进行安装即可</span><br></code></pre></div></td></tr></table></figure><h3 id="3-有用的指令"><a href="#3-有用的指令" class="headerlink" title="3. 有用的指令"></a>3. 有用的指令</h3><h4 id="（1）alias"><a href="#（1）alias" class="headerlink" title="（1）alias"></a>（1）alias</h4><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ <span class="hljs-built_in">alias</span> lm=<span class="hljs-string">&#x27;ls -al&#x27;</span>  <span class="hljs-comment">#表示用lm代表ls -al$ unalias xxx  #取消# 可以将alias命令加入~/.bashrc ~/.zshrc文件中，永久生效，使用source ～/.xxx更新设置</span><br></code></pre></div></td></tr></table></figure><h4 id="（2）history"><a href="#（2）history" class="headerlink" title="（2）history"></a>（2）history</h4><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ <span class="hljs-built_in">history</span> <span class="hljs-comment">#显示历史命令$ !5 # 执行第5个命令$ !! # 执行上一个命令$ !xx#执行以xx开头的命令</span><br></code></pre></div></td></tr></table></figure><h3 id="4-shell快捷键"><a href="#4-shell快捷键" class="headerlink" title="4. shell快捷键"></a>4. shell快捷键</h3><ul><li><p>移动光标：</p><ul><li><p><code>ctrl</code> + <code>a</code> 最前面</p></li><li><p><code>ctrl</code> + <code>e</code> 最后面</p></li></ul></li><li><p>删除：</p><ul><li><code>ctrl</code> + <code>u</code> 从光标处向前删除</li></ul></li><li><p><code>ctrl</code> + <code>k</code> 向后</p></li></ul><h3 id="5-变量"><a href="#5-变量" class="headerlink" title="5. 变量"></a>5. 变量</h3><ul><li><p>显示变量：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ <span class="hljs-built_in">echo</span> <span class="hljs-variable">$&#123;PATH&#125;</span><span class="hljs-comment"># 变量为大写字母</span><br></code></pre></div></td></tr></table></figure></li><li><p>变量的设定</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">1.设定格式：变量名=变量内容$ myname=cwh<span class="hljs-comment">#注意:等号两边不能接空格,若变量内容有空格,使用单或双引号将内容括起来2.还需要其他额外的指令所提供的信息时,可以使用反单引号『`指令`』或 『$(指令)』。如：取得核心版本号：$ version=$(uname -r)3.增加变量：变量名=$&#123;变量名&#125;xxx$ PATH=$&#123;PATH&#125;:/home/bin#因为PATH变量中目录与目录中间以冒号分隔$ name=$&#123;name&#125;yes #在name变量后加上yes4.若该变量需要在其他子程序执行,则需要以 export :$ export PATH5.取消变量：unset 变量名</span><br></code></pre></div></td></tr></table></figure><ul><li>将某一目录加入PATH：(以下方法按效力和作用域递增)</li></ul><ol><li><p>直接修改<code>$PATH</code>值：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ <span class="hljs-built_in">echo</span> <span class="hljs-variable">$PATH</span> //查看当前PATH的配置路径$ <span class="hljs-built_in">export</span> PATH=<span class="hljs-variable">$PATH</span>:/xxx/xxx //将需配置路径加入<span class="hljs-variable">$PATH</span> 等号两边一定不能有空格<br></code></pre></div></td></tr></table></figure><p> 生效方法：立即生效</p><p> 有效期限：<code>临时改变</code>，只能在当前的终端窗口中有效，当前窗口关闭后就会恢复原有的path配置</p><p> 用户局限：仅对当前用户</p></li><li><p>修改<code>.bashrc</code>文件</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ code /.bashrc<span class="hljs-comment">#在最后一行添上：$ export PATH=$PATH:/xxx/xxx  </span><br></code></pre></div></td></tr></table></figure><p>生效方法：</p><ul><li><p>关闭当前终端窗口，重新打开一个新终端窗口就能生效</p></li><li><p>输入“source .bashrc”命令，立即生效</p></li></ul><p>有效期限：永久有效</p><p>用户局限：仅对当前用户</p></li><li><p>修改<code>profile</code>文件或<code>environment</code>文件：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ code /etc/profile <span class="hljs-comment">#在最后一行添上：$ export PATH=$PATH:/xxx/xxx$ code /etc/environment#在 PATH=/········· 中加入“:/xxx/xxx”#个人认为修改profile文件更合适，因为能清晰地看到哪些变量是自己加上的，哪些是系统原有的</span><br></code></pre></div></td></tr></table></figure><p> 生效方法：系统重启</p><p> 有效期限：<code>永久有效</code></p><p> 用户局限：<code>对所有用户</code></p></li></ol></li><li><p>特殊变量: ?</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ <span class="hljs-built_in">echo</span> $? 显示指令回传的执行后代码<span class="hljs-comment">#指令正常，返回0#执行错误，返回非零</span><br></code></pre></div></td></tr></table></figure></li><li><p>export：引入变量 </p><p>子程序仅会继承父程序的环境变量, 子程序『不会』继承父程序的『自定义变量』。使用export可以将自定义变量变为环境变量。</p></li><li><p>locale：显示语系   发生乱码，设定系统语系编码即可。</p></li></ul><h2 id="Part2-：some-tips"><a href="#Part2-：some-tips" class="headerlink" title="Part2 ：some tips"></a>Part2 ：some tips</h2><ol><li><strong>修改开机默认引导</strong></li></ol><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ <span class="hljs-built_in">cd</span> /etc/default$ sudo gedit grub  修改GRUB_DEFAULT的值，ubuntu为0，windows为2$ sudo update-grub  //更新配置文件<br></code></pre></div></td></tr></table></figure><ol start="2"><li><strong>关闭sudo密码</strong></li></ol><p>终端输入命令sudo visudo，打开 visudo；</p><p>找到 %sudo ALL=(ALL:ALL) ALL 这一行修改为%sudo ALL=(ALL:ALL) NOPASSWD:ALL<br>有安全风险，请谨慎使用</p><ol start="3"><li> <strong>kill 进程</strong></li></ol><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ ps -x$ <span class="hljs-built_in">kill</span> -9 进程号<br></code></pre></div></td></tr></table></figure><ol start="4"><li><strong>wine字体太小</strong></li></ol><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ env WINEPREFIX=<span class="hljs-string">&quot;<span class="hljs-variable">$HOME</span>/.deepinwine/软件名&quot;</span> winecfg<br></code></pre></div></td></tr></table></figure><ol start="5"><li><strong>换镜像</strong></li></ol><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">sudo pacman-mirrors -i -c China -m rank<br></code></pre></div></td></tr></table></figure><ol start="6"><li><strong>使用yay时报错</strong></li></ol><ul><li><p>错误：无法从 mirrors.aliyun.com : The requested URL returned error: 404 获取文件</p><p>解决：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ sudo pacman-mirrors -i $ sudo pacman -Sy<br></code></pre></div></td></tr></table></figure></li></ul><ol start="7"><li><p><strong>majaro安装node和npm</strong> </p><p>踩坑！不要使用yay！使用nvm</p></li></ol><h2 id="Part3：Linux基本知识"><a href="#Part3：Linux基本知识" class="headerlink" title="Part3：Linux基本知识"></a>Part3：Linux基本知识</h2><h3 id="1-bin文件夹"><a href="#1-bin文件夹" class="headerlink" title="1. bin文件夹"></a>1. bin文件夹</h3><h4 id="（1）存放脚本"><a href="#（1）存放脚本" class="headerlink" title="（1）存放脚本"></a>（1）存放脚本</h4><p><code>~/bin</code>：个人用户的 script<br><code>/usr/local/bin</code>：存放所有用户都可以使用的 script<br><code>/usr/local/sbin</code>： 存放管理员的 script</p><h3 id="（2）存放其他文件"><a href="#（2）存放其他文件" class="headerlink" title="（2）存放其他文件"></a>（2）存放其他文件</h3><p><code>/usr/local/</code>：大部分是本地用户软件<br><code>/bin或/usr/bin</code>：不是用来放软件的，是用来存放 Linux distribution 专用文件的。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
