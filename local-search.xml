<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>C++学习笔记</title>
    <link href="/2021/08/31/C-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2021/08/31/C-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="Part1：菜鸟教程"><a href="#Part1：菜鸟教程" class="headerlink" title="Part1：菜鸟教程"></a>Part1：菜鸟教程</h2><h3 id="1-C-基本数据类型"><a href="#1-C-基本数据类型" class="headerlink" title="1. C++基本数据类型"></a>1. C++基本数据类型</h3><p>C++ 为程序员提供了种类丰富的内置数据类型和用户自定义的数据类型。下表列出了七种基本的 C++ 数据类型：</p><table><thead><tr><th align="center">类型</th><th align="center">关键字</th></tr></thead><tbody><tr><td align="center">布尔型</td><td align="center">bool</td></tr><tr><td align="center">字符型</td><td align="center">char</td></tr><tr><td align="center">整型</td><td align="center">int</td></tr><tr><td align="center">浮点型</td><td align="center">float</td></tr><tr><td align="center">双浮点型</td><td align="center">double</td></tr><tr><td align="center">无类型</td><td align="center">void</td></tr><tr><td align="center">宽字符型</td><td align="center">wchar_t</td></tr></tbody></table><blockquote><p>我们不应把 true 的值看成 1，把 false 的值看成 0。</p></blockquote><h3 id="2-C-修饰符类型"><a href="#2-C-修饰符类型" class="headerlink" title="2. C++修饰符类型"></a>2. C++修饰符类型</h3><p>C++ 允许在 <strong>char、int 和 double</strong> 数据类型前放置修饰符。修饰符用于改变基本类型的含义，所以它更能满足各种情境的需求。</p><p>下面列出了数据类型修饰符：</p><ul><li>signed</li><li>unsigned</li><li>long</li><li>short</li></ul><p>修饰符 <strong>signed、unsigned、long 和 short</strong> 可应用于整型，<strong>signed</strong> 和 <strong>unsigned</strong> 可应用于字符型，<strong>long</strong> 可应用于双精度型。</p><p>修饰符 <strong>signed</strong> 和 <strong>unsigned</strong> 也可以作为 <strong>long</strong> 或 <strong>short</strong> 修饰符的前缀。例如：<strong>unsigned long int</strong>。</p><p>C++ 允许使用速记符号来声明<strong>无符号短整数</strong>或<strong>无符号长整数</strong>。您可以不写 int，只写单词 <strong>unsigned、short</strong> 或 <strong>unsigned、long</strong>，<code>int</code> 是隐含的。</p><h3 id="3-C-储存类"><a href="#3-C-储存类" class="headerlink" title="3.C++储存类"></a>3.C++储存类</h3><p><strong>static</strong> 存储类指示编译器在程序的生命周期内保持局部变量的存在，而不需要在每次它进入和离开作用域时进行创建和销毁。</p><p>因此，使用 static 修饰局部变量可以在函数调用之间保持局部变量的值。</p><h3 id="4-数组"><a href="#4-数组" class="headerlink" title="4. 数组"></a>4. 数组</h3><p>所有的数组都是由连续的内存位置组成。最低的地址对应第一个元素，最高的地址对应最后一个元素。</p><h3 id="5-引用"><a href="#5-引用" class="headerlink" title="5.引用"></a>5.引用</h3><p>引用变量是某个已存在变量的另一个名字。一旦把引用初始化为某个变量，就可以使用该引用名称或变量名称来指向变量。</p><h4 id="C-引用-vs-指针"><a href="#C-引用-vs-指针" class="headerlink" title="C++ 引用 vs 指针"></a>C++ 引用 vs 指针</h4><p>引用很容易与指针混淆，它们之间有三个主要的不同：</p><ul><li>不存在空引用。引用必须连接到一块合法的内存。</li><li>一旦引用被初始化为一个对象，就不能被指向到另一个对象。指针可以在任何时候指向到另一个对象。</li><li>引用必须在创建时被初始化。指针可以在任何时间被初始化。</li></ul><p>我们可以为 i 声明引用变量，如下所示：</p><figure class="highlight 1c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs 1c">int<span class="hljs-meta">&amp;  r = i;</span><br></code></pre></div></td></tr></table></figure><p>之后，r就可以当作正常的变量使用</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">swap</span><span class="hljs-params">(<span class="hljs-keyword">int</span>&amp; x, <span class="hljs-keyword">int</span>&amp; y)</span></span><br><span class="hljs-function"></span>&#123;<br>   <span class="hljs-keyword">int</span> temp;<br>   temp = x; <span class="hljs-comment">/* 保存地址 x 的值 */</span><br>   x = y;    <span class="hljs-comment">/* 把 y 赋值给 x */</span><br>   y = temp; <span class="hljs-comment">/* 把 x 赋值给 y  */</span><br>   <span class="hljs-keyword">return</span>;<br>&#125;<span class="hljs-comment">//通过引用的方式传入参数，既可以免去指针操作的繁琐，又可以修改原参数</span><br></code></pre></div></td></tr></table></figure><h1 id="Part2：OI-WIKI"><a href="#Part2：OI-WIKI" class="headerlink" title="Part2：OI WIKI"></a>Part2：OI WIKI</h1><h2 id="1-内存分配"><a href="#1-内存分配" class="headerlink" title="1. 内存分配"></a>1. 内存分配</h2><p>​        C++ 中新增了 <code>new</code> 和 <code>delete</code> 关键字用来在“自由存储区”上分配空间，这个自由存储区可以是堆也可以是静态存储区，他们是为了配合“类”而出现的。其中 <code>delete[]</code> 还能够直接释放动态数组的内存，非常方便。<code>new</code> 和 <code>delete</code> 关键字会调用类型的构造函数和析构函数，相比 C 中的 <code>malloc()</code>、<code>realloc()</code>、<code>free()</code> 函数，他们对类型有更完善的支持，<strong>但是效率不如 C 中的这些函数</strong>。</p><p>​        简而言之，如果你需要动态分配内存的对象是<strong>基础类型或他们的数组</strong>，那么你可以**使用 <code>malloc()</code> **进行更高效的内存分配；但如果你新建的对象是非基础的类型，那么建议使用 <code>new</code> 以获得安全性检查。值得注意的是尽管 <code>new</code> 和 <code>malloc()</code> 都是返回指针，但是 <code>new</code> 出来的指针 <strong>只能</strong> 用 <code>delete</code> 回收，而 <code>malloc()</code> 出来的指针也只能用 <code>free()</code> 回收，否则会有内存泄漏的风险</p><h2 id="2-struct"><a href="#2-struct" class="headerlink" title="2. struct"></a>2. struct</h2><p>​    尽管在 C 和 C++ 中都有 struct 的概念，但是他们对应的东西是不能混用的！C 中的 struct 用来描述一种固定的内存组织结构，而 <strong>C++ 中的 struct 就是一种类</strong>，<strong>它与类唯一的区别就是它的成员和继承行为默认是 public 的</strong>，而一般类的默认成员是 private 的。这一点在写 C/C++ 混合代码时尤其致命。</p><p>另外，声明 struct 时 C++ 也不需要像 C 那么繁琐，</p><p>C 版本：</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node_t</span>&#123;</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node_t</span> *<span class="hljs-title">next</span>;</span><br>    <span class="hljs-keyword">int</span> key;<br>&#125; Node;<br></code></pre></div></td></tr></table></figure><p>C++ 版本</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span> &#123;</span><br>  Node *next;<br>  <span class="hljs-keyword">int</span> key;<br>&#125;;<span class="hljs-comment">//和类的声明非常类似</span><br></code></pre></div></td></tr></table></figure><h2 id="3-类"><a href="#3-类" class="headerlink" title="3. 类"></a>3. 类</h2><p>类（class）是结构体的拓展，不仅能够拥有成员元素，还拥有成员函数。</p><p>C++ 中 <code>struct</code> 关键字定义的也是类，上文中的 <strong>结构体</strong> 的定义来自 C。因为某些历史原因，C++ 保留并拓展了 <code>struct</code>。</p><h3 id="定义类"><a href="#定义类" class="headerlink" title="定义类"></a>定义类</h3><p>类使用关键字 <code>class</code> 或者 <code>struct</code> 定义，下文以 <code>class</code> 举例。</p><h3 id="访问说明符"><a href="#访问说明符" class="headerlink" title="访问说明符"></a>访问说明符</h3><ul><li><code>public</code>：<strong>类内</strong> 还是 <strong>类外</strong> 都可以访问。</li><li><code>protected</code>：可以被<strong>类内、派生类</strong>或者友元的成员访问，但类外<strong>不能访问</strong>。</li><li><code>private</code>：只能被 <strong>类内</strong> 成员或者友元的成员访问，<strong>不能</strong> 被从类外或者派生类中访问。</li></ul><p>对于 <code>struct</code>，它的所有成员都是默认 <code>public</code>。对于 <code>class</code>，它的所有成员都是默认 <code>private</code>。</p><blockquote><p>友元：使用 <code>friend</code> 关键字修饰某个函数或者类。</p><p>简单来说就是只要带有这个类的 <code>friend</code> 标记，就<strong>可以访问私有</strong>或<strong>受保护</strong>的成员元素。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
      <category>语言学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用Hexo+github搭建个人博客并发布文章</title>
    <link href="/2021/08/30/%E4%BD%BF%E7%94%A8Hexo-github%E9%83%A8%E7%BD%B2%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <url>/2021/08/30/%E4%BD%BF%E7%94%A8Hexo-github%E9%83%A8%E7%BD%B2%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<blockquote><p>具体教程自行google</p></blockquote><h2 id="1-环境配置"><a href="#1-环境配置" class="headerlink" title="1. 环境配置"></a>1. 环境配置</h2><p>在安装<code>nodejs</code>和<code>npm</code>时踩坑，一开始使用<code>yay</code>安装，但<code>npm</code>无法使用，一直报错缺少<code>module</code>.</p><p>解决：使用<code>nvm</code>安装，具体做法自行google</p><h2 id="2-hexo命令"><a href="#2-hexo命令" class="headerlink" title="2. hexo命令"></a>2. hexo命令</h2><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs hexo">hexo init #初始化博客<br>命令简写<br>hexo n &quot;我的博客&quot; == hexo new &quot;我的博客&quot; #新建文章<br>hexo g == hexo generate #生成<br>hexo s == hexo server #启动服务预览<br>hexo d == hexo deploy #部署<br><br>hexo server #Hexo会监视文件变动并自动更新，无须重启服务器<br>hexo server -s #静态模式<br>hexo server -p 5000 #更改端口<br>hexo server -i 192.168.1.1 #自定义 IP<br>hexo clean #清除缓存，若是网页正常情况下可以忽略这条命令<br></code></pre></div></td></tr></table></figure><h3 id="发布新文章"><a href="#发布新文章" class="headerlink" title="发布新文章"></a>发布新文章</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ hexo clean <span class="hljs-comment">#本来不需要这一步，但是加上总没错</span><br>$ hexo g<br>$ hexo d<br><span class="hljs-comment">#或者直接生成并部署</span><br>$ hexo g -d<br></code></pre></div></td></tr></table></figure><blockquote><p>如果看不到网页更新，尝试使用<code>Shift</code>+<code>F5</code>清空浏览器缓存后重试</p></blockquote><h3 id="关于hexo部署有时卡住的问题"><a href="#关于hexo部署有时卡住的问题" class="headerlink" title="关于hexo部署有时卡住的问题"></a>关于hexo部署有时卡住的问题</h3><p>个人认为是github的问题，让git走代理后解决</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 打开用户主目录下的.gitconfig文件，加入如下配置</span><br><span class="hljs-comment"># 注意：7891是本人的socks5端口，请以本机为准</span><br>[http]<br>        proxy = socks5://127.0.0.1:7891<br>[https]<br>        proxy = socks5://127.0.0.1:7891<br></code></pre></div></td></tr></table></figure><h2 id="3-主题配置"><a href="#3-主题配置" class="headerlink" title="3. 主题配置"></a>3. 主题配置</h2><p>本网站使用的主题为fluid,配置文档<a href="https://hexo.fluid-dev.com/docs/guide">看这里</a></p><p>其他功能定制<a href="https://www.erenship.com/posts/40222.html">看这里</a></p><h2 id="4-文章编写"><a href="#4-文章编写" class="headerlink" title="4. 文章编写"></a>4. 文章编写</h2><h3 id="4-1-Front-matter"><a href="#4-1-Front-matter" class="headerlink" title="4.1  Front-matter"></a>4.1  <a href="https://hexo.io/zh-cn/docs/front-matter">Front-matter</a></h3><ul><li><p>添加标签</p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">tags:</span> <span class="hljs-string">a</span> <span class="hljs-comment">#添加a标签</span><br><span class="hljs-string">tags:[a,</span> <span class="hljs-string">b]</span> <span class="hljs-comment">#添加a和b两个标签</span><br></code></pre></div></td></tr></table></figure></li><li><p>为首页的文章配封面图</p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">index_img:</span> <span class="hljs-string">/img/example.jpg</span><br></code></pre></div></td></tr></table></figure><p>如果想统一给文章设置一个默认图片（文章不设置 <code>index_img</code> 则默认使用这张图片），可在<strong>主题配置</strong>中设置：</p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">post:</span><br>  <span class="hljs-attr">default_index_img:</span> <span class="hljs-string">/img/example.jpg</span><br></code></pre></div></td></tr></table></figure></li><li><p>文章页顶部大图</p><p>默认显示<strong>主题配置</strong>中的 <code>post.banner_img</code></p><p>如需要设置单个文章的 Banner，在 <a href="https://hexo.io/zh-cn/docs/front-matter">Front-matter (opens new window)</a>中指定 <code>banner_img</code> 属性。</p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-string">banner_img：</span> <span class="hljs-string">/img/xxx.jpg</span><br></code></pre></div></td></tr></table></figure></li><li><p>参数表</p></li></ul><table><thead><tr><th align="left">参数</th><th align="left">描述</th><th align="left">默认值</th></tr></thead><tbody><tr><td align="left"><code>layout</code></td><td align="left">布局</td><td align="left"><a href="https://hexo.io/zh-cn/docs/configuration#%E6%96%87%E7%AB%A0"><code>config.default_layout</code></a></td></tr><tr><td align="left"><code>sticky</code></td><td align="left">给文章排序，100代表置顶，数字越小越靠后</td><td align="left"></td></tr><tr><td align="left"><code>date</code></td><td align="left">建立日期</td><td align="left">文件建立日期</td></tr><tr><td align="left"><code>updated</code></td><td align="left">更新日期</td><td align="left">文件更新日期</td></tr><tr><td align="left"><code>comments</code></td><td align="left">开启文章的评论功能(boolen值)</td><td align="left">true</td></tr><tr><td align="left"><code>tags</code></td><td align="left">标签（不适用于分页）</td><td align="left"></td></tr><tr><td align="left"><code>categories</code></td><td align="left">分类（不适用于分页）</td><td align="left"></td></tr><tr><td align="left"><code>permalink</code></td><td align="left">覆盖文章网址</td><td align="left"></td></tr><tr><td align="left"><code>excerpt</code></td><td align="left">自定义文章摘要</td><td align="left"></td></tr><tr><td align="left"><code>disableNunjucks</code></td><td align="left">Disable rendering of Nunjucks tag <code>&#123;&#123; &#125;&#125;</code>/<code>&#123;% %&#125;</code> and <a href="https://hexo.io/docs/tag-plugins">tag plugins</a> when enabled</td><td align="left"></td></tr><tr><td align="left"><code>lang</code></td><td align="left">Set the language to override <a href="https://hexo.io/docs/internationalization#Path">auto-detection</a></td><td align="left">Inherited from <code>_config.yml</code></td></tr></tbody></table><h2 id="4-2-添加评论功能"><a href="#4-2-添加评论功能" class="headerlink" title="4.2 添加评论功能"></a>4.2 添加评论功能</h2><p><a href="https://lovelijunyi.gitee.io/posts/e52c.html">详细配置</a></p>]]></content>
    
    
    <categories>
      
      <category>杂项</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
